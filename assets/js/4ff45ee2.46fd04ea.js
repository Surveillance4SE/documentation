"use strict";(self.webpackChunkes_documentation=self.webpackChunkes_documentation||[]).push([[868],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>p});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),m=u(n),p=a,h=m["".concat(s,".").concat(p)]||m[p]||l[p]||o;return n?r.createElement(h,i(i({ref:t},d),{},{components:n})):r.createElement(h,i({ref:t},d))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},979:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:3},i="Human Detection Module",c={unversionedId:"architecture/hdm",id:"architecture/hdm",title:"Human Detection Module",description:"The Human Detection Module consumes frames from the cameras (sent through RabbitMQ) and detects humans.",source:"@site/docs/architecture/hdm.md",sourceDirName:"architecture",slug:"/architecture/hdm",permalink:"/documentation/docs/architecture/hdm",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"IMA",permalink:"/documentation/docs/architecture/ima"},next:{title:"Health Checks",permalink:"/documentation/docs/architecture/health_check"}},s={},u=[{value:"Input message format",id:"input-message-format",level:2},{value:"Headers",id:"headers",level:3},{value:"Body",id:"body",level:3},{value:"Dependencies",id:"dependencies",level:2}],d={toc:u};function l(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"human-detection-module"},"Human Detection Module"),(0,a.kt)("p",null,"The Human Detection Module consumes frames from the cameras (sent through RabbitMQ) and detects humans."),(0,a.kt)("p",null,"An intrusion is detected when 3 consecutive frames have a human."),(0,a.kt)("p",null,"When an intrusion is detected a message is sent to the ",(0,a.kt)("a",{parentName:"p",href:"#"},"Intrusion Management API"),"."),(0,a.kt)("p",null,"The metadata (frame id and whether a human was detected) are stored in a Redis database.\nWhen a human is detected, there is a check on the database to see whether there are other 2 consecutive frames containing a human."),(0,a.kt)("h2",{id:"input-message-format"},"Input message format"),(0,a.kt)("h3",{id:"headers"},"Headers"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"{\n    source: 1,\n    timestamp: 1671051238317,\n    frame_id: 22,\n    content_type: 'image/jpeg',\n    content_encoding: 'binary'\n}\n")),(0,a.kt)("h3",{id:"body"},"Body"),(0,a.kt)("p",null,"Data of current frame must be sent as bytes."),(0,a.kt)("h2",{id:"dependencies"},"Dependencies"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Rabbit MQ server")," - Camera frames are exchanged using the RabbitMQ broker server."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Redis Database")," - Stores intrusion detection metadata to the Redis Database.")))}l.isMDXComponent=!0}}]);